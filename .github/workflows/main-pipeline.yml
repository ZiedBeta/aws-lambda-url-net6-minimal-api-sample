name: dotnet6 minimal api lambda sample pipeline

on:
  push:
    branches: [ main ]
    paths-ignore: 
      - "aws/cfn/hosted-zone.yml"
      - ".github/workflows/hosted-zone.yml"
      
  pull_request:
    branches: [ main ]

env:
  APPLICATION_PACKAGE: lambdaminimalapisample
  APPLICATION_NAME: minimal-api-sample
  LAMBDA_BUCKET_NAME: minimal-api-lambda-sample-bucket
  DOMAIN_NAME: minimal.inflow-it-labs.tk
  SLN_WORKING_DIR: ./src/LambdaMinimalApiSample

jobs:
  build:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{env.SLN_WORKING_DIR }}
 
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Publish
      run: dotnet publish -c Release
      
    - name: Zip artifact
      run: |
        zip -jr ${{ env.APPLICATION_PACKAGE }}-${{ github.sha }}.zip  ./LambdaMinimalApiSample/bin/Release/net6.0/publish/*
  
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.APPLICATION_PACKAGE }}
        path: ${{ env.SLN_WORKING_DIR }}/${{ env.APPLICATION_PACKAGE }}-${{ github.sha }}.zip
        
  publish-to-s3:
    needs: [build-and-publish]
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.APPLICATION_PACKAGE }}
   
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Create or update lambda bucket
      run: |
        aws cloudformation deploy --template-file ./aws/cfn/lambda-bucket.yml --stack-name lambda-bucket --parameter-overrides LambdaBucketName=${{ env.LAMBDA_BUCKET_NAME}}
        
    - name: Upload to S3
      run: |
        aws s3 cp ${{ env.APPLICATION_PACKAGE }}-${{ github.sha }}.zip s3://${{ env.LAMBDA_BUCKET_NAME}}

  deploy:
    needs: [publish-to-s3]
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3 
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Deploy certificate
      run: |
        aws cloudformation deploy --template-file ./aws/cfn/certificate.yml \
        --region us-east-1 \
        --stack-name minimal-api-certificate \
        --parameter-overrides DomainName=${{ env.DOMAIN_NAME }} \
        SSMParameterName="/${{ env.APPLICATION_NAME }}/certificate-arn" \
        Application=${{ env.APPLICATION_NAME }}
        HostedZoneId=${{ secrets.HOSTED_ZONE_ID }}

    - name: Get Certificate Arn
      run: |
        echo "CERTIFIFCATE_ARN=$(aws ssm get-parameter \
          --region us-east-1 \
          --name "/${{ env.APPLICATION_NAME }}/certificate-arn" \
          --query "Parameter.Value" \
          --output text)" >> $GITHUB_ENV
    - name: Test ouptut
      run: echo ${{ env.CERTIFIFCATE_ARN }}

    - name: Deploy lambda
      run: |
        aws cloudformation deploy --template-file ./aws/cfn/minimal-api-lambda.yml --stack-name minimal-api-lambda-sample --parameter-overrides \
            Application=${{ env.APPLICATION_NAME }} \
            Environment=dev \
            LambdaName=lambda \
            LambdaHandler=LambdaMinimalApiSample \
            LambdaBucketName=${{ env.LAMBDA_BUCKET_NAME }} \
            LambdaZipFile=${{ env.APPLICATION_PACKAGE }}-${{ github.sha }}.zip \
            CertificateArn=${{ env.CERTIFIFCATE_ARN }} \
            DomainName=${{ env.DOMAIN_NAME }} \
            HostedZoneId=${{ secrets.HOSTED_ZONE_ID }} \
            --capabilities CAPABILITY_IAM
           
